name: CI/CD Pipeline for Flask App with Trivy & Gitleaks

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------
      # 1. Run Gitleaks Scan
      # ------------------------
      - name: Run Gitleaks (Secret Scanning)
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ""          # optional custom rules
          fail: true               # fail if secrets found

      # ------------------------
      # 2. Configure AWS
      # ------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # ------------------------
      # 3. Login to Amazon ECR
      # ------------------------
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | \
          docker login --username AWS --password-stdin 154166281381.dkr.ecr.ap-south-1.amazonaws.com

      # ------------------------
      # 4. Build Docker Image with Dynamic Tag
      # ------------------------
      - name: Build Docker image
        run: |
          IMAGE_REPO="154166281381.dkr.ecr.ap-south-1.amazonaws.com/flask-app"
          IMAGE_TAG="${GITHUB_SHA::7}-build-${GITHUB_RUN_NUMBER}"
          docker build -t $IMAGE_REPO:$IMAGE_TAG -t $IMAGE_REPO:latest .
          echo "IMAGE_REPO=$IMAGE_REPO" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # ------------------------
      # 5. Trivy Scan (Security Gate)
      # ------------------------
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
          format: "table"
          exit-code: "1"       # fail job if vulnerabilities found
          severity: "CRITICAL,HIGH"

      # ------------------------
      # 6. Push Image to ECR
      # ------------------------
      - name: Push Docker image
        run: |
          docker push $IMAGE_REPO:$IMAGE_TAG
          docker push $IMAGE_REPO:latest

      # ------------------------
      # 7. Deploy to EKS
      # ------------------------
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name myapp-cluster --region ap-south-1

      - name: Deploy to EKS
        run: |
          # Update image with dynamic tag
          kubectl set image deployment/flask-app \
            flask-app=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} \
            --record
          kubectl rollout status deployment/flask-app
